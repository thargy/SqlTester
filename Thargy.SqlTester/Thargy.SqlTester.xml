<?xml version="1.0"?>
<!--
Generated by VSdocman, see http://www.helixoft.com
-->
<doc>
  <assembly>
    <name>Thargy.SqlTester</name>
  </assembly>
  <members>
    <member name="N:Thargy.SqlTester">
    </member>
    <member name="T:Thargy.SqlTester.ObjectRecord">
      <summary>
A record that can be created in code that implements <see cref="IDataRecord" />.</summary>
    </member>
    <member name="M:Thargy.SqlTester.ObjectRecord.#ctor(Thargy.SqlTester.RecordSetDefinition,System.Boolean,System.Double,System.Func{System.Int32,System.Object}[],System.Int32)">
      <summary>
Initializes a new instance of the <see cref="ObjectRecord" /> class.</summary>
      <param name="recordSetDefinition">
The table definition.</param>
      <param name="randomData">
if set to <see langword="true" /> fills columns with random data; otherwise fills them with their default values.</param>
      <param name="nullProbability">
The probability of a column's value being set to SQL null (0.0 for no nulls) - this is only applicable is <see paramref="randomData" /> is set to <see langword="true" /> [Defaults to 0.1 = 10%].</param>
      <param name="columnGenerators">
The column generators is an array of functions that generate a value for each column, if the function is <see langword="null" /> for a particular index then a random value is generated, if it is not null then the function is used. The function takes the current row number as it's only parameter and must return an object of the correct type for the column.</param>
      <param name="rowNumber">
The optional row number to pass to the generator.</param>
      <exception cref="System.ArgumentException">
Thrown if the number of column generators exceeds the number of columns in the record set definition.</exception>
    </member>
    <member name="M:Thargy.SqlTester.ObjectRecord.#ctor(Thargy.SqlTester.RecordSetDefinition,System.Object[])">
      <summary>
Initializes a new instance of the <see cref="ObjectRecord" /> class.</summary>
      <remarks>
If the number of column values supplied is less than the number of columns then the remaining columns are set to their equivalent default value.</remarks>
      <param name="recordSetDefinition">
The table definition.</param>
      <param name="columnValues">
The column values.</param>
    </member>
    <member name="M:Thargy.SqlTester.ObjectRecord.GetName(System.Int32)">
      <param name="i">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ObjectRecord.GetDataTypeName(System.Int32)">
      <param name="i">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ObjectRecord.GetFieldType(System.Int32)">
      <param name="i">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ObjectRecord.GetValue(System.Int32)">
      <param name="i">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ObjectRecord.GetValues(System.Object[])">
      <param name="values">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ObjectRecord.GetOrdinal(System.String)">
      <param name="name">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ObjectRecord.GetBoolean(System.Int32)">
      <param name="i">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ObjectRecord.GetByte(System.Int32)">
      <param name="i">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ObjectRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <param name="i">
</param>
      <param name="fieldOffset">
</param>
      <param name="buffer">
</param>
      <param name="bufferoffset">
</param>
      <param name="length">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ObjectRecord.GetChar(System.Int32)">
      <param name="i">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ObjectRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <param name="i">
</param>
      <param name="fieldOffset">
</param>
      <param name="buffer">
</param>
      <param name="bufferoffset">
</param>
      <param name="length">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ObjectRecord.GetGuid(System.Int32)">
      <param name="i">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ObjectRecord.GetInt16(System.Int32)">
      <param name="i">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ObjectRecord.GetInt32(System.Int32)">
      <param name="i">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ObjectRecord.GetInt64(System.Int32)">
      <param name="i">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ObjectRecord.GetFloat(System.Int32)">
      <param name="i">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ObjectRecord.GetDouble(System.Int32)">
      <param name="i">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ObjectRecord.GetString(System.Int32)">
      <param name="i">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ObjectRecord.GetDecimal(System.Int32)">
      <param name="i">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ObjectRecord.GetDateTime(System.Int32)">
      <param name="i">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ObjectRecord.IsDBNull(System.Int32)">
      <param name="i">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ObjectRecord.SetValue(System.Int32,System.Object)">
      <summary>
Sets the value. of the column with the specified index.</summary>
      <param name="i">
The index.</param>
      <param name="value">
The value.</param>
      <exception cref="System.ArgumentException">
The value is not valid for the specified index.</exception>
    </member>
    <member name="P:Thargy.SqlTester.ObjectRecord.Item(System.Int32)">
      <param name="i">
</param>
    </member>
    <member name="P:Thargy.SqlTester.ObjectRecord.FieldCount">
    </member>
    <member name="P:Thargy.SqlTester.ObjectRecord.ColumnValues">
      <summary>
Gets the column values.</summary>
    </member>
    <member name="P:Thargy.SqlTester.ObjectRecord.RecordSetDefinition">
    </member>
    <member name="P:Thargy.SqlTester.ObjectRecord.Item(System.String)">
      <param name="name">
</param>
    </member>
    <member name="T:Thargy.SqlTester.RandomSet">
      <summary>
Create a random record set where the values and columns are created randomly at runtime.</summary>
    </member>
    <member name="M:Thargy.SqlTester.RandomSet.#ctor(System.Int32,System.Int32,System.Int32,System.Double,System.Func{System.Int32,System.Object}[])">
      <summary>
Initializes a new instance of the <see cref="RandomSet" /> class.</summary>
      <param name="columns">
The number of columns, if less than one, then a random number is chosen.</param>
      <param name="minRows">
The minimum number of rows [defaults to 0].</param>
      <param name="maxRows">
The maximum number of rows [defaults to 1000].</param>
      <param name="nullProbability">
The probability of a column's value being set to SQL null (0.0 for no nulls) [Defaults to 0.1 = 10%].</param>
      <param name="columnGenerators">
The column generators is an array of functions that generate a value for each column, if the function is <see langword="null" /> for a particular index then a random value is generated, if it is not null then the function is used. The function takes the current row number as it's only parameter and must return an object of the correct type for the column.</param>
    </member>
    <member name="M:Thargy.SqlTester.RandomSet.#ctor(Thargy.SqlTester.RecordSetDefinition,System.Int32,System.Int32,System.Double,System.Func{System.Int32,System.Object}[])">
      <summary>
Initializes a new instance of the <see cref="RandomSet" /> class.</summary>
      <param name="recordSetDefinition">
The record set definition.</param>
      <param name="minRows">
The min rows.</param>
      <param name="maxRows">
The max rows.</param>
      <param name="nullProbability">
The probability of a column's value being set to SQL null (0.0 for no nulls) [Defaults to 0.1 = 10%].</param>
      <param name="columnGenerators">
The column generators is an array of functions that generate a value for each column, if the function is <see langword="null" /> for a particular index then a random value is generated, if it is not null then the function is used. The function takes the current row number as it's only parameter and must return an object of the correct type for the column.</param>
      <exception cref="System.ArgumentOutOfRangeException">
ArgumentOutOfRangeException</exception>
    </member>
    <member name="T:Thargy.SqlTester.ExceptionRecord">
      <summary>
Implements a record that throws an exception.</summary>
      <remarks>
When added to an <see cref="T:Thargy.SqlTester.IObjectSet">IObjectSet</see> will cause the reader to throw the specified exception once this record is accessed.</remarks>
      <seealso cref="SqlExceptionPrototype">
SqlExceptionPrototype</seealso>
      <seealso cref="T:Thargy.SqlTester.IObjectSet">
IObjectSet</seealso>
    </member>
    <member name="F:Thargy.SqlTester.ExceptionRecord.Exception">
      <summary>
The exception that will be thrown when accessing this record.</summary>
    </member>
    <member name="M:Thargy.SqlTester.ExceptionRecord.#ctor(System.Exception)">
      <summary>
Initializes a new instance of the <see cref="ExceptionRecord" /> class.</summary>
      <param name="exception">
The exception that will be thrown when accessing this record.</param>
    </member>
    <member name="M:Thargy.SqlTester.ExceptionRecord.GetName(System.Int32)">
      <param name="i">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ExceptionRecord.GetDataTypeName(System.Int32)">
      <param name="i">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ExceptionRecord.GetFieldType(System.Int32)">
      <param name="i">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ExceptionRecord.GetValue(System.Int32)">
      <param name="i">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ExceptionRecord.GetValues(System.Object[])">
      <param name="values">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ExceptionRecord.GetOrdinal(System.String)">
      <param name="name">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ExceptionRecord.GetBoolean(System.Int32)">
      <param name="i">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ExceptionRecord.GetByte(System.Int32)">
      <param name="i">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ExceptionRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <param name="i">
</param>
      <param name="fieldOffset">
</param>
      <param name="buffer">
</param>
      <param name="bufferoffset">
</param>
      <param name="length">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ExceptionRecord.GetChar(System.Int32)">
      <param name="i">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ExceptionRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <param name="i">
</param>
      <param name="fieldoffset">
</param>
      <param name="buffer">
</param>
      <param name="bufferoffset">
</param>
      <param name="length">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ExceptionRecord.GetGuid(System.Int32)">
      <param name="i">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ExceptionRecord.GetInt16(System.Int32)">
      <param name="i">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ExceptionRecord.GetInt32(System.Int32)">
      <param name="i">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ExceptionRecord.GetInt64(System.Int32)">
      <param name="i">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ExceptionRecord.GetFloat(System.Int32)">
      <param name="i">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ExceptionRecord.GetDouble(System.Int32)">
      <param name="i">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ExceptionRecord.GetString(System.Int32)">
      <param name="i">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ExceptionRecord.GetDecimal(System.Int32)">
      <param name="i">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ExceptionRecord.GetDateTime(System.Int32)">
      <param name="i">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ExceptionRecord.GetData(System.Int32)">
      <param name="i">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ExceptionRecord.IsDBNull(System.Int32)">
      <param name="i">
</param>
    </member>
    <member name="P:Thargy.SqlTester.ExceptionRecord.FieldCount">
    </member>
    <member name="P:Thargy.SqlTester.ExceptionRecord.RecordSetDefinition">
    </member>
    <member name="T:Thargy.SqlTester.ObjectReader">
      <summary>
The object reader, implements <see cref="IDataReader" /> in a way that closely simulates a <see cref="SqlDataReader" />.</summary>
    </member>
    <member name="M:Thargy.SqlTester.ObjectReader.#ctor(System.Collections.Generic.IEnumerable{Thargy.SqlTester.IObjectSet})">
      <summary>
Initializes a new instance of the <see cref="ObjectReader" /> class.</summary>
      <param name="recordSets">
The record sets.</param>
    </member>
    <member name="M:Thargy.SqlTester.ObjectReader.GetEnumerator">
    </member>
    <member name="M:Thargy.SqlTester.ObjectReader.Add(Thargy.SqlTester.IObjectSet)">
      <param name="item">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ObjectReader.Clear">
    </member>
    <member name="M:Thargy.SqlTester.ObjectReader.Contains(Thargy.SqlTester.IObjectSet)">
      <param name="item">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ObjectReader.CopyTo(Thargy.SqlTester.IObjectSet[],System.Int32)">
      <param name="array">
</param>
      <param name="arrayIndex">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ObjectReader.Remove(Thargy.SqlTester.IObjectSet)">
      <param name="item">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ObjectReader.Dispose">
    </member>
    <member name="M:Thargy.SqlTester.ObjectReader.GetName(System.Int32)">
      <param name="i">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ObjectReader.GetDataTypeName(System.Int32)">
      <param name="i">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ObjectReader.GetFieldType(System.Int32)">
      <param name="i">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ObjectReader.GetOrdinal(System.String)">
      <param name="name">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ObjectReader.GetValue(System.Int32)">
      <param name="i">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ObjectReader.GetValues(System.Object[])">
      <param name="values">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ObjectReader.GetBoolean(System.Int32)">
      <param name="i">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ObjectReader.GetByte(System.Int32)">
      <param name="i">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ObjectReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <param name="i">
</param>
      <param name="fieldOffset">
</param>
      <param name="buffer">
</param>
      <param name="bufferoffset">
</param>
      <param name="length">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ObjectReader.GetChar(System.Int32)">
      <param name="i">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ObjectReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <param name="i">
</param>
      <param name="fieldoffset">
</param>
      <param name="buffer">
</param>
      <param name="bufferoffset">
</param>
      <param name="length">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ObjectReader.GetGuid(System.Int32)">
      <param name="i">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ObjectReader.GetInt16(System.Int32)">
      <param name="i">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ObjectReader.GetInt32(System.Int32)">
      <param name="i">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ObjectReader.GetInt64(System.Int32)">
      <param name="i">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ObjectReader.GetFloat(System.Int32)">
      <param name="i">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ObjectReader.GetDouble(System.Int32)">
      <param name="i">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ObjectReader.GetString(System.Int32)">
      <param name="i">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ObjectReader.GetDecimal(System.Int32)">
      <param name="i">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ObjectReader.GetDateTime(System.Int32)">
      <param name="i">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ObjectReader.GetData(System.Int32)">
      <param name="i">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ObjectReader.IsDBNull(System.Int32)">
      <param name="i">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ObjectReader.Close">
    </member>
    <member name="M:Thargy.SqlTester.ObjectReader.GetSchemaTable">
    </member>
    <member name="M:Thargy.SqlTester.ObjectReader.NextResult">
    </member>
    <member name="M:Thargy.SqlTester.ObjectReader.Read">
    </member>
    <member name="M:Thargy.SqlTester.ObjectReader.Reset">
      <summary>
Resets the data reader, clearing enumerators, re-opening and allowing recordset collection to be modified.</summary>
    </member>
    <member name="P:Thargy.SqlTester.ObjectReader.CurrentSet">
      <summary>
Gets the current record.</summary>
    </member>
    <member name="P:Thargy.SqlTester.ObjectReader.Depth">
    </member>
    <member name="P:Thargy.SqlTester.ObjectReader.Item(System.String)">
      <param name="name">
</param>
    </member>
    <member name="P:Thargy.SqlTester.ObjectReader.Count">
    </member>
    <member name="P:Thargy.SqlTester.ObjectReader.IsReadOnly">
    </member>
    <member name="P:Thargy.SqlTester.ObjectReader.RecordsAffected">
    </member>
    <member name="P:Thargy.SqlTester.ObjectReader.IsClosed">
    </member>
    <member name="P:Thargy.SqlTester.ObjectReader.Item(System.Int32)">
      <param name="i">
</param>
    </member>
    <member name="P:Thargy.SqlTester.ObjectReader.FieldCount">
    </member>
    <member name="P:Thargy.SqlTester.ObjectReader.Current">
      <summary>
Gets the current record.</summary>
    </member>
    <member name="T:Thargy.SqlTester.SqlExceptionPrototype">
      <summary>
The exception that is thrown when SQL Server returns a warning or error. This class cannot be inherited.</summary>
    </member>
    <member name="F:Thargy.SqlTester.SqlExceptionPrototype.SqlException">
      <summary>
The equivalent <see cref="SqlException" />.</summary>
    </member>
    <member name="M:Thargy.SqlTester.SqlExceptionPrototype.#ctor(System.Data.SqlClient.SqlErrorCollection,System.String,System.Guid)">
      <summary>
Initializes a new instance of the <see cref="SqlExceptionPrototype" /> class.</summary>
      <param name="errorCollection">
The error collection.</param>
      <param name="serverVersion">
The server version.</param>
      <param name="conId">
The connection id.</param>
    </member>
    <member name="M:Thargy.SqlTester.SqlExceptionPrototype.#ctor(System.Data.SqlClient.SqlException)">
      <summary>
Initializes a new instance of the <see cref="SqlExceptionPrototype" /> class.</summary>
      <param name="exception">
The exception.</param>
    </member>
    <member name="M:Thargy.SqlTester.SqlExceptionPrototype.ToString">
      <summary>
Returns a string that represents the current <see cref="T:System.Data.SqlClient.SqlException" /> object, and includes the client connection ID (for more information, see <see cref="P:System.Data.SqlClient.SqlException.ClientConnectionId" />).</summary>
      <returns>
A string that represents the current <see cref="T:System.Data.SqlClient.SqlException" /> object.<see cref="T:System.String" />.</returns>
    </member>
    <member name="M:Thargy.SqlTester.SqlExceptionPrototype.op_implicit(Thargy.SqlTester.SqlExceptionPrototype)~System.Data.SqlClient.SqlException">
      <summary>
Implicit conversion from <see cref="SqlExceptionPrototype" /> to <see cref="SqlException" />.</summary>
      <returns>
The result of the operator.</returns>
      <param name="prototype">
The prototype.</param>
    </member>
    <member name="M:Thargy.SqlTester.SqlExceptionPrototype.op_implicit(System.Data.SqlClient.SqlException)~Thargy.SqlTester.SqlExceptionPrototype">
      <summary>
Implicit conversion from <see cref="SqlException" /> to <see cref="SqlExceptionPrototype" />.</summary>
      <returns>
The result of the operator.</returns>
      <param name="exception">
The SQL exception.</param>
    </member>
    <member name="P:Thargy.SqlTester.SqlExceptionPrototype.State">
      <summary>
Gets a numeric error code from SQL Server that represents an error, warning or "no data found" message. For more information about how to decode these values, see SQL Server Books Online.</summary>
      <value>
The number representing the error code.</value>
    </member>
    <member name="P:Thargy.SqlTester.SqlExceptionPrototype.Source">
      <summary>
Gets the name of the provider that generated the error.</summary>
      <value>
The name of the provider that generated the error.</value>
    </member>
    <member name="P:Thargy.SqlTester.SqlExceptionPrototype.Number">
      <summary>
Gets a number that identifies the type of error.</summary>
      <value>
The number that identifies the type of error.</value>
    </member>
    <member name="P:Thargy.SqlTester.SqlExceptionPrototype.Class">
      <summary>
Gets the severity level of the error returned from the .NET Framework Data Provider for SQL Server.</summary>
      <value>
A value from 1 to 25 that indicates the severity level of the error.</value>
    </member>
    <member name="P:Thargy.SqlTester.SqlExceptionPrototype.Errors">
      <summary>
Gets a collection of one or more <see cref="T:System.Data.SqlClient.SqlError" /> objects that give detailed information about exceptions generated by the .NET Framework Data Provider for SQL Server.</summary>
      <value>
The collected instances of the <see cref="T:System.Data.SqlClient.SqlError" /> class.</value>
    </member>
    <member name="P:Thargy.SqlTester.SqlExceptionPrototype.Procedure">
      <summary>
Gets the name of the stored procedure or remote procedure call (RPC) that generated the error.</summary>
      <value>
The name of the stored procedure or RPC.</value>
    </member>
    <member name="P:Thargy.SqlTester.SqlExceptionPrototype.LineNumber">
      <summary>
Gets the line number within the Transact-SQL command batch or stored procedure that generated the error.</summary>
      <value>
The line number within the Transact-SQL command batch or stored procedure that generated the error.</value>
    </member>
    <member name="P:Thargy.SqlTester.SqlExceptionPrototype.Server">
      <summary>
Gets the name of the computer that is running an instance of SQL Server that generated the error.</summary>
      <value>
The name of the computer running an instance of SQL Server.</value>
    </member>
    <member name="T:Thargy.SqlTester.IObjectSet">
      <summary>
Defines a collection of records.</summary>
      <remarks>
This interface has no corresponding interface in <see cref="System.Data" />, but it is used here to allow convenient manipulate of record sets outside of a reader.</remarks>
    </member>
    <member name="P:Thargy.SqlTester.IObjectSet.Definition">
      <summary>
Gets the definition.</summary>
    </member>
    <member name="T:Thargy.SqlTester.SqlErrorPrototype">
      <summary>
Allows creation of a <see cref="SqlError" />.</summary>
    </member>
    <member name="F:Thargy.SqlTester.SqlErrorPrototype.SqlError">
      <summary>
The equivalent <see cref="SqlError" />.</summary>
    </member>
    <member name="M:Thargy.SqlTester.SqlErrorPrototype.#ctor(System.Int32,System.Byte,System.Byte,System.String,System.String,System.String,System.Int32,System.UInt32)">
      <summary>
Initializes a new instance of the <see cref="SqlErrorPrototype" /> class, and in doing so initializes the <see cref="SqlError" /> property.</summary>
      <param name="infoNumber">
The info number.</param>
      <param name="errorState">
State of the error.</param>
      <param name="errorClass">
The error class.</param>
      <param name="server">
The server.</param>
      <param name="errorMessage">
The error message.</param>
      <param name="procedure">
The procedure.</param>
      <param name="lineNumber">
The line number.</param>
      <param name="win32ErrorCode">
The win32 error code (if this error is the first in a <see cref="SqlException">SqlException's</see> collection then this value will create an <see cref="SqlException.InnerException">inner exception</see> of type <see cref="Win32Exception" />.</param>
      <exception cref="System.ArgumentOutOfRangeException">
ArgumentOutOfRangeException</exception>
    </member>
    <member name="M:Thargy.SqlTester.SqlErrorPrototype.#ctor(System.Data.SqlClient.SqlError)">
      <summary>
Initializes a new instance of the <see cref="SqlErrorPrototype" /> class.</summary>
      <param name="error">
The error.</param>
    </member>
    <member name="M:Thargy.SqlTester.SqlErrorPrototype.ToString">
    </member>
    <member name="M:Thargy.SqlTester.SqlErrorPrototype.op_implicit(Thargy.SqlTester.SqlErrorPrototype)~System.Data.SqlClient.SqlError">
      <summary>
Implicit conversion from <see cref="SqlErrorPrototype" /> to <see cref="SqlError" />.</summary>
      <returns>
The result of the operator.</returns>
      <param name="prototype">
The prototype.</param>
    </member>
    <member name="M:Thargy.SqlTester.SqlErrorPrototype.op_implicit(System.Data.SqlClient.SqlError)~Thargy.SqlTester.SqlErrorPrototype">
      <summary>
Implicit conversion from <see cref="SqlError" /> to <see cref="SqlErrorPrototype" />.</summary>
      <returns>
The result of the operator.</returns>
      <param name="sqlError">
The SQL error.</param>
    </member>
    <member name="P:Thargy.SqlTester.SqlErrorPrototype.Procedure">
      <summary>
Gets the name of the stored procedure or remote procedure call (RPC) that generated the error.</summary>
      <value>
The name of the stored procedure or RPC.For more information on errors generated by SQL Server, see SQL Server Books Online.</value>
    </member>
    <member name="P:Thargy.SqlTester.SqlErrorPrototype.Number">
      <summary>
Gets a number that identifies the type of error.</summary>
      <value>
The number that identifies the type of error.</value>
    </member>
    <member name="P:Thargy.SqlTester.SqlErrorPrototype.Source">
      <summary>
Gets the name of the provider that generated the error.</summary>
      <value>
The name of the provider that generated the error.</value>
    </member>
    <member name="P:Thargy.SqlTester.SqlErrorPrototype.Class">
      <summary>
Gets the severity level of the error returned from SQL Server.</summary>
      <value>
A value from 1 to 25 that indicates the severity level of the error. The default is 0.</value>
    </member>
    <member name="P:Thargy.SqlTester.SqlErrorPrototype.State">
      <summary>
Gets a numeric error code from SQL Server that represents an error, warning or "no data found" message.</summary>
      <value>
The number that represents the error code.</value>
    </member>
    <member name="P:Thargy.SqlTester.SqlErrorPrototype.Server">
      <summary>
Gets the name of the instance of SQL Server that generated the error.</summary>
      <value>
The name of the instance of SQL Server.</value>
    </member>
    <member name="P:Thargy.SqlTester.SqlErrorPrototype.Message">
      <summary>
Gets the text describing the error.</summary>
      <value>
The text describing the error.For more information on errors generated by SQL Server, see SQL Server Books Online.</value>
    </member>
    <member name="P:Thargy.SqlTester.SqlErrorPrototype.LineNumber">
      <summary>
Gets the line number within the Transact-SQL command batch or stored procedure that contains the error.</summary>
      <value>
The line number within the Transact-SQL command batch or stored procedure that contains the error.</value>
    </member>
    <member name="T:Thargy.SqlTester.SqlErrorCollectionPrototype">
      <summary>
Allows creation of a <see cref="SqlErrorCollection" />, and addition of <see cref="SqlError">SqlErrors</see>.</summary>
      <remarks>
<para> To add <see cref="SqlError">SqlErrors</see> you will probably want to create them with the <see cref="SqlErrorPrototype" /> class, which supports implicit conversion to <see cref="SqlError" />.</para> <para>In the same way, this class supports implicit conversion to <see cref="SqlErrorCollection" />.</para></remarks>
      <seealso cref="SqlErrorPrototype">
SqlErrorPrototype</seealso>
    </member>
    <member name="F:Thargy.SqlTester.SqlErrorCollectionPrototype.SqlErrorCollection">
      <summary>
The equivalent <see cref="SqlErrorCollection" />.</summary>
    </member>
    <member name="M:Thargy.SqlTester.SqlErrorCollectionPrototype.#ctor">
      <summary>
Initializes a new instance of the <see cref="SqlErrorCollectionPrototype" /> class.</summary>
    </member>
    <member name="M:Thargy.SqlTester.SqlErrorCollectionPrototype.#ctor(System.Data.SqlClient.SqlErrorCollection)">
      <summary>
Initializes a new instance of the <see cref="SqlErrorCollectionPrototype" /> class.</summary>
      <param name="collection">
The collection.</param>
    </member>
    <member name="M:Thargy.SqlTester.SqlErrorCollectionPrototype.GetEnumerator">
    </member>
    <member name="M:Thargy.SqlTester.SqlErrorCollectionPrototype.CopyTo(System.Array,System.Int32)">
      <param name="array">
</param>
      <param name="index">
</param>
    </member>
    <member name="M:Thargy.SqlTester.SqlErrorCollectionPrototype.Add(System.Data.SqlClient.SqlError)">
      <summary>
Adds the specified error to the collection.</summary>
      <param name="error">
The error.</param>
    </member>
    <member name="M:Thargy.SqlTester.SqlErrorCollectionPrototype.ToString">
    </member>
    <member name="M:Thargy.SqlTester.SqlErrorCollectionPrototype.op_implicit(Thargy.SqlTester.SqlErrorCollectionPrototype)~System.Data.SqlClient.SqlErrorCollection">
      <summary>
Implicit conversion from <see cref="SqlErrorCollectionPrototype" /> to <see cref="SqlErrorCollection" />.</summary>
      <returns>
The result of the operator.</returns>
      <param name="prototype">
The prototype.</param>
    </member>
    <member name="M:Thargy.SqlTester.SqlErrorCollectionPrototype.op_implicit(System.Data.SqlClient.SqlErrorCollection)~Thargy.SqlTester.SqlErrorCollectionPrototype">
      <summary>
Implicit conversion from <see cref="SqlErrorCollection" /> to <see cref="SqlErrorCollectionPrototype" />.</summary>
      <returns>
The result of the operator.</returns>
      <param name="collection">
The SQL error.</param>
    </member>
    <member name="P:Thargy.SqlTester.SqlErrorCollectionPrototype.SyncRoot">
    </member>
    <member name="P:Thargy.SqlTester.SqlErrorCollectionPrototype.IsSynchronized">
    </member>
    <member name="P:Thargy.SqlTester.SqlErrorCollectionPrototype.Count">
    </member>
    <member name="P:Thargy.SqlTester.SqlErrorCollectionPrototype.Item(System.Int32)">
      <summary>
Gets the error at the specified index.</summary>
      <value>
A <see cref="T:System.Data.SqlClient.SqlError" /> that contains the error at the specified index.</value>
      <param name="index">
The zero-based index of the error to retrieve.</param>
      <exception cref="System.IndexOutOfRangeException">
Index parameter is outside array bounds.</exception>
    </member>
    <member name="T:Thargy.SqlTester.ColumnDefinition">
      <summary>
Used to defined a column for inclusion in a <see cref="RecordSetDefinition">RecordSetDefinition</see>.</summary>
      <seealso cref="RecordSetDefinition">
RecordSetDefinition</seealso>
    </member>
    <member name="F:Thargy.SqlTester.ColumnDefinition.ClassType">
      <summary>
The CLR <see cref="Type" /> that this column accepts.</summary>
    </member>
    <member name="F:Thargy.SqlTester.ColumnDefinition.DbType">
      <summary>
The <see cref="DbType" />.</summary>
    </member>
    <member name="F:Thargy.SqlTester.ColumnDefinition.DefaultValue">
      <summary>
The columns default value.</summary>
      <remarks>
This is required when <see cref="IsNullable" /> is set to <see langword="true" />.</remarks>
      <seealso cref="IsNullable">
IsNullable</seealso>
    </member>
    <member name="F:Thargy.SqlTester.ColumnDefinition.Fill">
      <summary>
Whether column should be full.</summary>
      <remarks>
If this is set to <see langword="true" /> then randomly filled columns will be filled, and explicitly set values must match the <see cref="FixedLength" />; otherwise the <see cref="FixedLength" /> indicates a maximum.</remarks>
      <seealso cref="FixedLength">
FixedLength</seealso>
    </member>
    <member name="F:Thargy.SqlTester.ColumnDefinition.FixedLength">
      <summary>
The fixed length for the type (-1 indicates variable length - i.e. 'var' types).</summary>
      <remarks>
When <see cref="Fill" /> is <see langword="false" /> this indicate a maximum length.</remarks>
      <seealso cref="Fill">
Fill</seealso>
    </member>
    <member name="F:Thargy.SqlTester.ColumnDefinition.IsNullable">
      <summary>
Whether the column is nullable.</summary>
    </member>
    <member name="F:Thargy.SqlTester.ColumnDefinition.Name">
      <summary>
The column name.</summary>
    </member>
    <member name="F:Thargy.SqlTester.ColumnDefinition.SqlDbType">
      <summary>
The <see cref="SqlDbType" />.</summary>
    </member>
    <member name="F:Thargy.SqlTester.ColumnDefinition.SqlType">
      <summary>
The SQL Clr Type for the column.</summary>
    </member>
    <member name="F:Thargy.SqlTester.ColumnDefinition.TypeName">
      <summary>
The equivalent SQL Server type name.</summary>
    </member>
    <member name="M:Thargy.SqlTester.ColumnDefinition.#ctor(System.String,System.Data.DbType,System.Int32,System.Boolean,System.Boolean,System.Object)">
      <summary>
Initializes a new instance of the <see cref="ColumnDefinition" /> class.</summary>
      <param name="name">
The name.</param>
      <param name="dbType">
The columns type.</param>
      <param name="length">
The length (if fixed length).</param>
      <param name="fill">
if set to <see langword="true" /> expects the column to be full (only appropriate for fixed length columns).</param>
      <param name="isNullable">
if set to <see langword="true" /> the column is nullable.</param>
      <param name="defaultValue">
The default value (required if column is not nullable).</param>
      <exception cref="System.ArgumentOutOfRangeException">
Thrown if the <see paramref="dbType" /> is unsupported.</exception>
      <exception cref="System.ArgumentOutOfRangeException">
Thrown if the <see paramref="defaultValue" /> is invalid for the specified <see paramref="dbType" />.</exception>
    </member>
    <member name="M:Thargy.SqlTester.ColumnDefinition.#ctor(System.String,System.Data.SqlDbType,System.Int32,System.Boolean,System.Boolean,System.Object)">
      <summary>
Initializes a new instance of the <see cref="ColumnDefinition" /> class.</summary>
      <param name="name">
The name.</param>
      <param name="sqlDbType">
The columns type.</param>
      <param name="length">
The length (if fixed length).</param>
      <param name="fill">
if set to <see langword="true" /> expects the column to be full (only appropriate for fixed length columns).</param>
      <param name="isNullable">
if set to <see langword="true" /> the column is nullable.</param>
      <param name="defaultValue">
The default value (required if column is not nullable).</param>
      <exception cref="System.ArgumentOutOfRangeException">
Thrown if the <see paramref="sqlDbType" /> is unsupported.</exception>
      <exception cref="System.ArgumentOutOfRangeException">
Thrown if the <see paramref="defaultValue" /> is invalid for the specified <see paramref="sqlDbType" />.</exception>
    </member>
    <member name="M:Thargy.SqlTester.ColumnDefinition.GetRandomValue(System.Double)">
      <summary>
Gets the random value.</summary>
      <remarks>
This is used to create a random value that is valid for this column.</remarks>
      <returns>
A valid random value for the column.</returns>
      <param name="nullProbability">
The probability of a column's value being set to SQL null (0.0 for no nulls) [Defaults to 0.0 = 0%].</param>
    </member>
    <member name="M:Thargy.SqlTester.ColumnDefinition.Validate(System.Object,System.Object@)">
      <summary>
Validates the specified value, to see if it is valid for this column.</summary>
      <remarks>
As well as validating the input value, it will convert the value to the most appropriate type for the column.</remarks>
      <returns>
<see langword="true" /> if the value was valid.</returns>
      <param name="value">
The value.</param>
      <param name="sqlValue">
The SQL value.</param>
      <exception cref="System.ArgumentOutOfRangeException">
ArgumentOutOfRangeException</exception>
    </member>
    <member name="M:Thargy.SqlTester.ColumnDefinition.ToString">
    </member>
    <member name="P:Thargy.SqlTester.ColumnDefinition.Ordinal">
      <summary>
Gets the ordinal.</summary>
      <remarks>
This is only set when the column is added to a <see cref="RecordSetDefinition" />.</remarks>
      <seealso cref="RecordSetDefinition">
RecordSetDefinition</seealso>
    </member>
    <member name="P:Thargy.SqlTester.ColumnDefinition.IsFixedLength">
      <summary>
Whether the length is fixed.</summary>
      <remarks>
If the length is not fixed then <see cref="FixedLength" /> will be negative.</remarks>
    </member>
    <member name="P:Thargy.SqlTester.ColumnDefinition.RecordSetDefinition">
      <summary>
Gets the record set definition that the column is associated with.</summary>
      <remarks>
Once a <see cref="ColumnDefinition" /> is associated with a <see cref="RecordSetDefinition" /> it cannot be associated with another.</remarks>
      <seealso cref="RecordSetDefinition">
RecordSetDefinition</seealso>
    </member>
    <member name="P:Thargy.SqlTester.ColumnDefinition.NullValue">
      <summary>
The SQL Null value for this column.</summary>
    </member>
    <member name="T:Thargy.SqlTester.IObjectRecord">
      <summary>
Interface that defines data records that are implemented by the test system.</summary>
    </member>
    <member name="P:Thargy.SqlTester.IObjectRecord.RecordSetDefinition">
      <summary>
Gets the record set definition.</summary>
    </member>
    <member name="T:Thargy.SqlTester.Tester">
      <summary>
Useful extension methods.</summary>
    </member>
    <member name="F:Thargy.SqlTester.Tester.MinSmallDateTime">
      <summary>
The minumum value for SmallDateTime.</summary>
    </member>
    <member name="F:Thargy.SqlTester.Tester.MaxSmallDateTime">
      <summary>
The maximum value for SmallDateTime.</summary>
    </member>
    <member name="M:Thargy.SqlTester.Tester.RandomBoolean(System.Random)">
      <summary>
Generates a random boolean.</summary>
      <param name="random">
The random generator.</param>
    </member>
    <member name="M:Thargy.SqlTester.Tester.RandomByte(System.Random)">
      <summary>
Generates a random byte.</summary>
      <param name="random">
The random generator.</param>
    </member>
    <member name="M:Thargy.SqlTester.Tester.RandomChar(System.Random)">
      <summary>
Generates a random char.</summary>
      <param name="random">
The random generator.</param>
    </member>
    <member name="M:Thargy.SqlTester.Tester.RandomInt16(System.Random)">
      <summary>
Generates a random Int16.</summary>
      <param name="random">
The random generator.</param>
    </member>
    <member name="M:Thargy.SqlTester.Tester.RandomInt32(System.Random)">
      <summary>
Generates a random Int32.</summary>
      <param name="random">
The random generator.</param>
    </member>
    <member name="M:Thargy.SqlTester.Tester.RandomInt64(System.Random)">
      <summary>
Generates a random Int64.</summary>
      <param name="random">
The random generator.</param>
    </member>
    <member name="M:Thargy.SqlTester.Tester.RandomFloat(System.Random)">
      <summary>
Generates a random float.</summary>
      <param name="random">
The random generator.</param>
    </member>
    <member name="M:Thargy.SqlTester.Tester.RandomDouble(System.Random)">
      <summary>
Generates a random double.</summary>
      <param name="random">
The random generator.</param>
    </member>
    <member name="M:Thargy.SqlTester.Tester.RandomDecimal(System.Random)">
      <summary>
Generates a random decimal.</summary>
      <param name="random">
The random generator.</param>
    </member>
    <member name="M:Thargy.SqlTester.Tester.RandomDateTime(System.Random,System.DateTimeKind)">
      <summary>
Generates a random date time, with a specific <see cref="DateTimeKind" />.</summary>
      <param name="random">
The random generator.</param>
      <param name="kind">
The <see cref="DateTimeKind" />.</param>
    </member>
    <member name="M:Thargy.SqlTester.Tester.RandomDateTime(System.Random)">
      <summary>
Generates a random date time.</summary>
      <remarks>
Also generates a random <see cref="DateTimeKind" />.</remarks>
      <param name="random">
The random generator.</param>
    </member>
    <member name="M:Thargy.SqlTester.Tester.RandomDateTimeOffset(System.Random)">
      <summary>
Generates a random date time.</summary>
      <remarks>
Also generates a random <see cref="DateTimeKind" />.</remarks>
      <param name="random">
The random generator.</param>
    </member>
    <member name="M:Thargy.SqlTester.Tester.RandomString(System.Random,System.Int32,System.Boolean,System.Double)">
      <summary>
Generates a random string.</summary>
      <param name="random">
The random generator.</param>
      <param name="maxLength">
Maximum length.</param>
      <param name="unicode">
if set to <see langword="true" /> string is UTF16; otherwise it uses ASCII.</param>
      <param name="nullProbability">
The probability of a null being returned (0.0 for no nulls).</param>
    </member>
    <member name="M:Thargy.SqlTester.Tester.RandomSqlDbTypeForColumn(System.Random)">
      <summary>
Generates a random <see cref="SqlDbType" /> for a column.</summary>
      <param name="random">
The random generator.</param>
    </member>
    <member name="M:Thargy.SqlTester.Tester.RandomSRID(System.Random)">
      <summary>
Generates a random SRID.</summary>
      <param name="random">
The random generator.</param>
    </member>
    <member name="M:Thargy.SqlTester.Tester.RandomSqlValue(System.Random,System.Data.SqlDbType,System.Int32,System.Double,System.Boolean)">
      <summary>
Generates the random SQL value.</summary>
      <remarks>
Does not support SqlDbType.Structured.</remarks>
      <param name="random">
The random generator.</param>
      <param name="sqlDbType">
Type of the SQL db.</param>
      <param name="length">
The length (if fixed length).</param>
      <param name="nullProbability">
The probability of a column's value being set to SQL null (0.0 for no nulls) [Defaults to 0.0 = 0%].</param>
      <param name="fill">
if set to <see langword="true" /> expects the column to be full (only appropriate for fixed length columns).</param>
      <exception cref="System.ArgumentOutOfRangeException">
ArgumentOutOfRangeException</exception>
      <exception cref="System.ArgumentOutOfRangeException">
ArgumentOutOfRangeException</exception>
      <exception cref="System.ArgumentOutOfRangeException">
ArgumentOutOfRangeException</exception>
    </member>
    <member name="M:Thargy.SqlTester.Tester.RandomRecordSetDefinition(System.Random,System.Int32)">
      <summary>
Generates a random record set definition</summary>
      <param name="random">
The random generator.</param>
      <param name="columns">
The columns (if less than one, is random).</param>
      <exception cref="System.ArgumentOutOfRangeException">
ArgumentOutOfRangeException</exception>
      <exception cref="System.ArgumentOutOfRangeException">
ArgumentOutOfRangeException</exception>
      <exception cref="System.ArgumentOutOfRangeException">
ArgumentOutOfRangeException</exception>
    </member>
    <member name="M:Thargy.SqlTester.Tester.ToString(System.Diagnostics.Stopwatch,System.String,System.Object[])">
      <summary>
Returns a formatted <see cref="string" /> with ' completed in {ms}ms.' appended.</summary>
      <returns>
A <see cref="string" /> containing the <paramref name="parameters" /> in the specified <paramref name="format" /> with ' completed in {ms}ms.' appended. The time duration is taken from the <paramref name="stopwatch" />.</returns>
      <param name="stopwatch">
The stopwatch.</param>
      <param name="format">
The format string.</param>
      <param name="parameters">
The objects to format in the string.</param>
      <exception cref="System.FormatException">
<para>The <paramref name="format" /> is invalid</para> <para>-or-</para> <para>The index of the format item is less than zero, or greater than or equal to the length or the <paramref name="parameters" />.</para></exception>
    </member>
    <member name="M:Thargy.SqlTester.Tester.RandomOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>
Returns a random element from an enumeration, that matches the predicate; otherwise returns the default value.</summary>
      <returns>
A random element or default.</returns>
      <param name="enumeration">
The enumeration.</param>
      <param name="predicate">
The optional predicate.</param>
    </member>
    <member name="M:Thargy.SqlTester.Tester.Random``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>
Returns a random element from an enumeration, that matches the predicate; otherwise throws an exception if the predicate is not matched.</summary>
      <returns>
A random element.</returns>
      <param name="enumeration">
The enumeration.</param>
      <param name="predicate">
The optional predicate.</param>
    </member>
    <member name="M:Thargy.SqlTester.Tester.IsNull(System.Object)">
      <summary>
Determines whether the specified value is null.</summary>
      <returns>
<see langword="true" /> if the specified value is null; otherwise, <see langword="false" />.</returns>
      <param name="value">
The value.</param>
    </member>
    <member name="M:Thargy.SqlTester.Tester.ToSqlDbType(System.Data.DbType)">
      <summary>
To the type of the SQL db.</summary>
      <param name="dbType">
Type of the db.</param>
      <exception cref="System.ArgumentOutOfRangeException">
ArgumentOutOfRangeException</exception>
    </member>
    <member name="M:Thargy.SqlTester.Tester.NullValue(System.Data.SqlDbType)">
      <summary>
Get's the SQL null value for the type.</summary>
      <param name="sqlDbType">
Type of the SQL db.</param>
    </member>
    <member name="P:Thargy.SqlTester.Tester.RandomGenerator">
      <summary>
A random number generator.</summary>
    </member>
    <member name="T:Thargy.SqlTester.RecordSetDefinition">
      <summary>
Defines a record set.</summary>
    </member>
    <member name="F:Thargy.SqlTester.RecordSetDefinition.ExceptionRecord">
      <summary>
Special case record set definition used to identify exception records.</summary>
    </member>
    <member name="M:Thargy.SqlTester.RecordSetDefinition.#ctor(System.Collections.Generic.IEnumerable{Thargy.SqlTester.ColumnDefinition})">
      <summary>
Initializes a new instance of the <see cref="RecordSetDefinition" /> class.</summary>
      <param name="columnDefinitions">
The column definitions.</param>
    </member>
    <member name="M:Thargy.SqlTester.RecordSetDefinition.#ctor(Thargy.SqlTester.ColumnDefinition[])">
      <summary>
Initializes a new instance of the <see cref="RecordSetDefinition" /> class.</summary>
      <param name="columnDefinitions">
The column definitions.</param>
    </member>
    <member name="M:Thargy.SqlTester.RecordSetDefinition.GetOrdinal(System.String)">
      <summary>
Gets the ordinal.</summary>
      <param name="name">
The name.</param>
      <exception cref="System.IndexOutOfRangeException">
IndexOutOfRangeException</exception>
    </member>
    <member name="M:Thargy.SqlTester.RecordSetDefinition.GetEnumerator">
    </member>
    <member name="P:Thargy.SqlTester.RecordSetDefinition.Item(System.Int32)">
      <summary>
Gets the <see cref="ColumnDefinition" /> at the specified index.</summary>
      <value>
The <see cref="ColumnDefinition" />.</value>
      <param name="index">
The index.</param>
      <exception cref="System.IndexOutOfRangeException">
Thrown if the supplied index is out of range.</exception>
    </member>
    <member name="P:Thargy.SqlTester.RecordSetDefinition.FieldCount">
      <summary>
Gets the field count (number of columns).</summary>
    </member>
    <member name="P:Thargy.SqlTester.RecordSetDefinition.Columns">
      <summary>
Gets the column definitions in the record set.</summary>
    </member>
    <member name="T:Thargy.SqlTester.ObjectSet">
      <summary>
Holds a collection of records.</summary>
      <seealso cref="IObjectSet">
IObjectSet</seealso>
    </member>
    <member name="M:Thargy.SqlTester.ObjectSet.#ctor(Thargy.SqlTester.RecordSetDefinition,System.Collections.Generic.IEnumerable{Thargy.SqlTester.IObjectRecord})">
      <summary>
Initializes a new instance of the <see cref="ObjectSet" /> class.</summary>
      <param name="recordSetDefinition">
The record set definition.</param>
      <param name="records">
The records.</param>
    </member>
    <member name="M:Thargy.SqlTester.ObjectSet.Add(Thargy.SqlTester.IObjectRecord)">
      <param name="item">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ObjectSet.Clear">
    </member>
    <member name="M:Thargy.SqlTester.ObjectSet.Contains(Thargy.SqlTester.IObjectRecord)">
      <param name="item">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ObjectSet.CopyTo(Thargy.SqlTester.IObjectRecord[],System.Int32)">
      <param name="array">
</param>
      <param name="arrayIndex">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ObjectSet.Remove(Thargy.SqlTester.IObjectRecord)">
      <param name="item">
</param>
    </member>
    <member name="M:Thargy.SqlTester.ObjectSet.GetEnumerator">
    </member>
    <member name="M:Thargy.SqlTester.ObjectSet.ToString">
    </member>
    <member name="P:Thargy.SqlTester.ObjectSet.Definition">
    </member>
    <member name="P:Thargy.SqlTester.ObjectSet.IsReadOnly">
    </member>
    <member name="P:Thargy.SqlTester.ObjectSet.Count">
    </member>
  </members>
</doc>
